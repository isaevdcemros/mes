<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MES Pro - Управление производством</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/frappe-gantt@0.6.0/dist/frappe-gantt.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/frappe-gantt@0.6.0/dist/frappe-gantt.min.js"></script>
  <style>
    /* Стили остаются без изменений */
    :root {
      --primary: #2c3e50;
      --primary-dark: #1a2530;
      --secondary: #3498db;
      --success: #27ae60;
      --danger: #e74c3c;
      --warning: #f39c12;
      --info: #2980b9;
      --light: #f8f9fa;
      --dark: #212529;
      --gray: #7f8c8d;
      --border: #bdc3c7;
      --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      --hover-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
      --transition: all 0.3s ease;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: #ecf0f1;
      color: var(--dark);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
    }

    .container {
      max-width: 1800px;
      margin: 0 auto;
      display: grid;
      grid-template-columns: 1fr;
      gap: 24px;
    }

    header {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      padding: 20px 24px;
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      overflow: hidden;
    }

    header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--secondary), var(--success));
    }

    .header-content {
      flex: 1;
      position: relative;
      z-index: 2;
    }

    .header-stats {
      display: flex;
      gap: 20px;
      margin-top: 10px;
    }

    .stat-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
    }

    .stat-value {
      font-weight: 600;
      background: rgba(255, 255, 255, 0.1);
      padding: 2px 10px;
      border-radius: 20px;
    }

    .api-status {
      background: rgba(255, 255, 255, 0.2);
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 14px;
      display: flex;
      align-items: center;
      gap: 8px;
      position: relative;
      z-index: 2;
    }

    .api-status.online {
      color: var(--success);
    }

    .api-status.offline {
      color: var(--danger);
    }

    h1 {
      font-weight: 700;
      font-size: 28px;
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    h1 i {
      font-size: 32px;
      color: var(--secondary);
    }

    .subtitle {
      font-weight: 300;
      opacity: 0.9;
      font-size: 16px;
    }

    .card {
      background: white;
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      padding: 24px;
      transition: var(--transition);
      position: relative;
      overflow: hidden;
    }

    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--secondary);
    }

    .card:hover {
      box-shadow: var(--hover-shadow);
      transform: translateY(-3px);
    }

    .card-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 20px;
      padding-bottom: 12px;
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      gap: 10px;
      color: var(--primary);
    }

    .card-title i {
      color: var(--secondary);
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(52, 152, 219, 0.1);
      border-radius: 50%;
    }

    .flex-row {
      display: flex;
      gap: 24px;
      flex-wrap: wrap;
    }

    .col {
      flex: 1;
      min-width: 300px;
    }

    .col-2 {
      flex: 2;
      min-width: 600px;
    }

    .col-3 {
      flex: 3;
      min-width: 900px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: var(--dark);
    }

    .form-control {
      width: 100%;
      padding: 12px 15px;
      border: 1px solid var(--border);
      border-radius: 8px;
      font-size: 16px;
      transition: var(--transition);
      background: var(--light);
    }

    .form-control:focus {
      outline: none;
      border-color: var(--secondary);
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.15);
    }

    .checkbox-group {
      display: flex;
      align-items: center;
      gap: 8px;
      margin: 15px 0;
    }

    .checkbox-group input {
      width: auto;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 12px 20px;
      font-size: 16px;
      font-weight: 500;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      transition: var(--transition);
      background: var(--secondary);
      color: white;
    }

    .btn:hover {
      background: #2980b9;
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    .btn i {
      font-size: 18px;
    }

    .btn-outline {
      background: transparent;
      border: 1px solid var(--secondary);
      color: var(--secondary);
    }

    .btn-outline:hover {
      background: rgba(52, 152, 219, 0.1);
    }

    .btn-danger {
      background: var(--danger);
    }

    .btn-danger:hover {
      background: #c0392b;
    }

    .btn-success {
      background: var(--success);
    }

    .btn-success:hover {
      background: #219653;
    }

    .btn-warning {
      background: var(--warning);
      color: var(--dark);
    }

    .btn-warning:hover {
      background: #e67e22;
      color: white;
    }

    .btn-info {
      background: var(--info);
    }

    .btn-info:hover {
      background: #1c6ea4;
    }

    .btn-group {
      display: flex;
      gap: 12px;
      margin-top: 20px;
      flex-wrap: wrap;
    }

    #gantt {
      height: 500px;
      border-radius: 8px;
      overflow: hidden;
      border: 1px solid var(--border);
      background: white;
    }

    .equipment-tabs {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin: 20px 0;
    }

    .tab-btn {
      padding: 10px 20px;
      border: none;
      background: var(--light);
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: var(--transition);
      position: relative;
      overflow: hidden;
    }

    .tab-btn:hover {
      background: #e9ecef;
    }

    .tab-btn.active {
      background: var(--secondary);
      color: white;
    }

    .tab-btn .badge {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50px;
      padding: 2px 8px;
      font-size: 12px;
    }

    .del-eq {
      position: absolute;
      top: -6px;
      right: -6px;
      background: var(--danger);
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      cursor: pointer;
      opacity: 0;
      transition: var(--transition);
    }

    .tab-btn:hover .del-eq {
      opacity: 1;
    }

    .load-info {
      background: rgba(52, 152, 219, 0.1);
      border-radius: 8px;
      padding: 15px;
      margin: 20px 0;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .load-info i {
      font-size: 24px;
      color: var(--secondary);
    }

    .load-content h3 {
      font-size: 18px;
      margin-bottom: 5px;
      color: var(--primary);
    }

    .progress-bar {
      height: 8px;
      background: #e9ecef;
      border-radius: 4px;
      margin-top: 10px;
      overflow: hidden;
    }

    .progress {
      height: 100%;
      background: var(--secondary);
      border-radius: 4px;
    }

    #ordersList {
      height: 300px;
      overflow-y: auto;
      border: 1px solid var(--border);
      border-radius: 8px;
      background: white;
    }

    .order-item {
      padding: 15px;
      border-bottom: 1px solid var(--border);
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .order-item:hover {
      background: rgba(52, 152, 219, 0.05);
    }

    .order-item.selected {
      background: rgba(52, 152, 219, 0.1);
      border-left: 3px solid var(--secondary);
    }

    .order-info {
      flex: 1;
    }

    .order-name {
      font-weight: 500;
      margin-bottom: 5px;
      color: var(--primary);
    }

    .order-dates {
      font-size: 14px;
      color: var(--gray);
      display: flex;
      gap: 15px;
    }

    .order-progress {
      font-size: 14px;
      font-weight: 500;
      min-width: 60px;
      text-align: right;
    }

    .order-progress.high {
      color: var(--success);
    }

    .order-progress.medium {
      color: var(--warning);
    }

    .order-progress.low {
      color: var(--danger);
    }

    .order-cost {
      font-size: 13px;
      background: rgba(39, 174, 96, 0.1);
      color: var(--success);
      padding: 2px 8px;
      border-radius: 4px;
      margin-top: 5px;
    }

    .order-actions {
      display: flex;
      gap: 10px;
    }

    .action-btn {
      width: 32px;
      height: 32px;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--light);
      border: none;
      cursor: pointer;
      transition: var(--transition);
      color: var(--dark);
    }

    .action-btn:hover {
      background: #e9ecef;
      color: var(--danger);
    }

    .search-container {
      position: relative;
      margin-bottom: 15px;
    }

    .search-container i {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--gray);
    }

    .search-container input {
      padding-left: 40px;
    }

    .empty-state {
      text-align: center;
      padding: 30px;
      color: var(--gray);
    }

    .empty-state i {
      font-size: 48px;
      margin-bottom: 15px;
      opacity: 0.3;
    }

    .empty-state p {
      margin-top: 10px;
    }

    .dependency-indicator {
      display: inline-block;
      background: rgba(52, 152, 219, 0.1);
      color: var(--secondary);
      border-radius: 4px;
      padding: 2px 8px;
      font-size: 12px;
      margin-top: 5px;
    }

    .import-export-area {
      width: 100%;
      height: 150px;
      padding: 15px;
      border: 1px solid var(--border);
      border-radius: 8px;
      font-family: monospace;
      font-size: 14px;
      resize: vertical;
      margin: 15px 0;
      background: var(--light);
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 25px;
      border-radius: 8px;
      background: white;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      gap: 10px;
      z-index: 1000;
      transform: translateX(120%);
      transition: transform 0.3s ease;
      max-width: 400px;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      border-left: 4px solid var(--success);
    }

    .notification.error {
      border-left: 4px solid var(--danger);
    }

    .notification.warning {
      border-left: 4px solid var(--warning);
    }

    .notification i {
      font-size: 20px;
    }

    .spec-preview {
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 15px;
      margin-top: 20px;
      max-height: 300px;
      overflow-y: auto;
      background: #f8f9fa;
    }

    .spec-item {
      padding: 8px;
      border-bottom: 1px solid var(--border);
    }

    .spec-item-header {
      font-weight: 500;
      display: flex;
      justify-content: space-between;
      cursor: pointer;
      color: var(--primary);
    }

    .spec-item-children {
      padding-left: 20px;
      margin-top: 8px;
    }

    .spec-item-child {
      padding: 5px;
      border-left: 2px solid var(--secondary);
      margin-bottom: 5px;
      background: rgba(52, 152, 219, 0.03);
    }

    .gost-section {
      background: #f8f9ff;
      border-radius: 8px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid #dbe4ff;
    }

    .gost-section h3 {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
      color: var(--primary);
    }

    .api-section {
      background: #f0f7ff;
      border-radius: 8px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid #cce5ff;
    }

    .dashboard-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .stat-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: var(--card-shadow);
      text-align: center;
      transition: var(--transition);
    }

    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--hover-shadow);
    }

    .stat-value {
      font-size: 28px;
      font-weight: 700;
      margin: 10px 0;
      color: var(--primary);
    }

    .stat-label {
      color: var(--gray);
      font-size: 14px;
    }

    .stat-card i {
      font-size: 32px;
      color: var(--secondary);
      margin-bottom: 10px;
    }

    .kpi-indicator {
      height: 6px;
      background: #ecf0f1;
      border-radius: 3px;
      margin-top: 10px;
      overflow: hidden;
    }

    .kpi-progress {
      height: 100%;
      border-radius: 3px;
    }

    .kpi-good {
      background: var(--success);
    }

    .kpi-medium {
      background: var(--warning);
    }

    .kpi-bad {
      background: var(--danger);
    }

    .resource-management {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .resource-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: var(--card-shadow);
    }

    .resource-card h4 {
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border);
      color: var(--primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .resource-list {
      max-height: 200px;
      overflow-y: auto;
    }

    .resource-item {
      padding: 10px 0;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
    }

    .resource-item:last-child {
      border-bottom: none;
    }

    .time-input {
      width: 80px;
      padding: 5px;
      border-radius: 4px;
      border: 1px solid var(--border);
      text-align: center;
    }

    .cost-input {
      width: 120px;
      padding: 5px;
      border-radius: 4px;
      border: 1px solid var(--border);
      text-align: right;
    }

    .analytics-section {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-top: 20px;
      box-shadow: var(--card-shadow);
    }

    .analytics-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .chart-container {
      height: 300px;
      background: #f8f9fa;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 20px;
      border: 1px solid var(--border);
    }

    .chart-placeholder {
      text-align: center;
      color: var(--gray);
    }

    .chart-placeholder i {
      font-size: 48px;
      margin-bottom: 10px;
      opacity: 0.3;
    }

    .priority-select {
      width: 150px;
      padding: 8px;
      border-radius: 6px;
      border: 1px solid var(--border);
    }

    .optimization-card {
      background: #fff8e1;
      border-radius: 10px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid #ffe082;
    }

    .optimization-card h4 {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
      color: var(--primary);
    }

    .deadline-input {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .deadline-input input {
      flex: 1;
    }

    .role-selector {
      display: flex;
      gap: 15px;
      margin-bottom: 20px;
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
    }

    .role-btn {
      padding: 10px 20px;
      border-radius: 6px;
      background: #e9ecef;
      border: none;
      cursor: pointer;
      font-weight: 500;
      transition: var(--transition);
    }

    .role-btn.active {
      background: var(--secondary);
      color: white;
    }

    .ai-assistant {
      background: #e8f5e9;
      border-radius: 8px;
      padding: 20px;
      margin-top: 20px;
      border: 1px solid #c8e6c9;
    }

    .ai-assistant textarea {
      width: 100%;
      min-height: 100px;
      padding: 15px;
      border-radius: 8px;
      border: 1px solid var(--border);
      font-size: 16px;
      margin-bottom: 15px;
    }

    .ai-response {
      background: white;
      border-radius: 8px;
      padding: 15px;
      border: 1px solid var(--border);
      margin-top: 15px;
      max-height: 200px;
      overflow-y: auto;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-left: auto;
    }

    .user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--secondary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    @media (max-width: 1200px) {
      .dashboard-stats {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      }
    }

    @media (max-width: 992px) {
      .flex-row {
        flex-direction: column;
      }
      
      .col, .col-2, .col-3 {
        min-width: 100%;
      }
      
      #gantt {
        height: 400px;
      }

      header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
      }

      .header-stats {
        flex-wrap: wrap;
      }
    }

    @media (max-width: 768px) {
      .btn-group {
        flex-direction: column;
      }
      
      .btn {
        width: 100%;
      }

      .resource-management {
        grid-template-columns: 1fr;
      }
    }

    @media (max-width: 576px) {
      body {
        padding: 15px;
      }
      
      .card {
        padding: 20px 15px;
      }

      .stat-value {
        font-size: 24px;
      }
    }
    /* Добавим новые стили для редактора структур */
    .structure-editor {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 20px;
      border: 1px dashed #ced4da;
    }
    
    .structure-node {
      background: white;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 10px;
      margin: 10px 0;
      cursor: move;
    }
    
    .structure-node-header {
      display: flex;
      justify-content: space-between;
      font-weight: bold;
    }
    
    .add-node-btn {
      background: #e9ecef;
      border: none;
      border-radius: 4px;
      padding: 5px 10px;
      margin-top: 10px;
      cursor: pointer;
    }
    
    .gantt-container {
      height: 500px;
      overflow: auto;
    }
    
    .gantt-grid-container {
      height: 100%;
    }
    .gantt .bar-progress {
      fill: #4caf50 !important;
    }
    
    .gantt .bar-wrapper:hover {
      fill: #2196f3 !important;
    }
    /* ... (все CSS стили из предыдущей версии) ... */
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="header-content">
        <h1><i class="fas fa-industry"></i> MES Pro - Управление производством</h1>
        <p class="subtitle">Система планирования и контроля производственных процессов</p>
        
        <div class="header-stats">
          <div class="stat-item">
            <i class="fas fa-tasks"></i> Заказы: <span class="stat-value" id="totalOrders">0</span>
          </div>
          <div class="stat-item">
            <i class="fas fa-cogs"></i> Участки: <span class="stat-value" id="totalWorkCenters">0</span>
          </div>
          <div class="stat-item">
            <i class="fas fa-chart-line"></i> Загрузка: <span class="stat-value" id="avgLoad">0%</span>
          </div>
          <div class="stat-item">
            <i class="fas fa-money-bill-wave"></i> Эффективность: <span class="stat-value" id="efficiency">0%</span>
          </div>
        </div>
      </div>
      <div class="user-info">
        <div class="user-avatar" id="userAvatar">A</div>
        <div>
          <div id="userName">Загрузка...</div>
          <div id="userRole">Роль: Загрузка...</div>
        </div>
      </div>
    </header>
    
    <div class="role-selector">
      <button class="role-btn active" data-role="admin">Администратор</button>
      <button class="role-btn" data-role="planner">Планировщик</button>
      <button class="role-btn" data-role="director">Директор</button>
      <button class="role-btn" data-role="client">Клиент</button>
      <button class="role-btn" data-role="director-planner">Директор+Планировщик</button>
    </div>
    
    <div class="flex-row">
      <div class="col">
        <!-- Управление рабочими центрами -->
        <div class="card admin-view">
          <h2 class="card-title"><i class="fas fa-cogs"></i> Управление рабочими центрами</h2>
          <form id="addWorkCenterForm">
            <div class="form-group">
              <label for="newWorkCenterName">Название участка</label>
              <input type="text" id="newWorkCenterName" class="form-control" placeholder="Введите название участка" required />
            </div>
            
            <div class="form-group">
              <label for="workCenterDescription">Описание</label>
              <textarea id="workCenterDescription" class="form-control" placeholder="Описание возможностей участка"></textarea>
            </div>
            
            <div class="flex-row">
              <div class="col">
                <div class="form-group">
                  <label for="hourlyRate">Стоимость часа ($)</label>
                  <input type="number" id="hourlyRate" class="form-control" min="0" step="0.1" value="50" required />
                </div>
              </div>
              <div class="col">
                <div class="form-group">
                  <label for="setupTime">Время переналадки (ч)</label>
                  <input type="number" id="setupTime" class="form-control" min="0" value="2" required />
                </div>
              </div>
            </div>
            
            <button type="submit" class="btn"><i class="fas fa-plus"></i> Добавить участок</button>
          </form>
          
          <div class="ai-assistant admin-view">
            <h3><i class="fas fa-robot"></i> AI-ассистент для создания структуры</h3>
            <p>Опишите структуру вашего производства:</p>
            <textarea id="aiStructureInput" placeholder="Пример: У меня есть три участка: фрезерный с двумя станками, токарный с тремя станками и участок сборки. Также есть склад материалов."></textarea>
            <button class="btn btn-success" id="aiGenerateStructureBtn">
              <i class="fas fa-magic"></i> Создать структуру
            </button>
            <div class="ai-response" id="aiStructureResponse">
              Результат генерации структуры появится здесь...
            </div>
          </div>
          
          <div class="work-centers-list" id="workCentersList"></div>
        </div>
        
        <!-- Управление пользователями -->
        <div class="card admin-view">
          <h2 class="card-title"><i class="fas fa-users"></i> Управление пользователями</h2>
          <div class="form-group">
            <label for="userNameInput">Имя пользователя</label>
            <input type="text" id="userNameInput" class="form-control" placeholder="Введите имя пользователя" />
          </div>
          <div class="form-group">
            <label for="userPassword">Пароль</label>
            <input type="password" id="userPassword" class="form-control" placeholder="Введите пароль" />
          </div>
          <div class="form-group">
            <label for="userRoleSelect">Роль</label>
            <select id="userRoleSelect" class="form-control">
              <option value="admin">Администратор</option>
              <option value="planner">Планировщик</option>
              <option value="director">Директор</option>
              <option value="client">Клиент</option>
              <option value="director-planner">Директор+Планировщик</option>
            </select>
          </div>
          <button class="btn" id="addUserBtn">
            <i class="fas fa-user-plus"></i> Добавить пользователя
          </button>
          
          <div class="users-list" id="usersList" style="margin-top: 20px;"></div>
        </div>
        
        <!-- Список заказов -->
        <div class="card planner-view">
          <h2 class="card-title"><i class="fas fa-tasks"></i> Список заказов</h2>
          <div class="search-container">
            <i class="fas fa-search"></i>
            <input type="text" id="searchOrders" class="form-control" placeholder="Поиск заказов..." />
          </div>
          <div id="ordersList">
            <div class="empty-state">
              <i class="fas fa-inbox"></i>
              <h3>Нет заказов</h3>
              <p>Добавьте заказы для отображения в списке</p>
            </div>
          </div>
        </div>
      </div>
      <!-- Диаграмма Ганта -->
      <div class="col-3">
        
        <div class="card planner-view">
          <h2 class="card-title"><i class="fas fa-chart-gantt"></i> Диаграмма Ганта</h2>
          <div class="flex-row">
            <div class="col">
              <div class="form-group">
                <label for="timeScale">Масштаб времени</label>
                <select id="timeScale" class="form-control">
                  <option value="day">День</option>
                  <option value="week" selected>Неделя</option>
                  <option value="month">Месяц</option>
                  <option value="quarter">Квартал</option>
                </select>
              </div>
            </div>
            <div class="col">
              <div class="form-group">
                <label for="viewMode">Режим отображения</label>
                <select id="viewMode" class="form-control">
                  <option value="all">Все участки</option>
                  <option value="current" selected>Текущий участок</option>
                  <option value="critical">Критический путь</option>
                </select>
              </div>
            </div>
            <div class="col">
              <div class="form-group">
                <label for="priorityFilter">Приоритет</label>
                <select id="priorityFilter" class="form-control">
                  <option value="all">Все</option>
                  <option value="high">Высокий</option>
                  <option value="medium">Средний</option>
                  <option value="low">Низкий</option>
                </select>
              </div>
            </div>
          </div>
          <div id="gantt">
            <div class="empty-state">
              <i class="fas fa-chart-line"></i>
              <h3>Нет данных для отображения</h3>
              <p>Добавьте участки и заказы для построения диаграммы</p>
            </div>
          </div>
        </div>
        
        <div class="card admin-view">
      <h2 class="card-title"><i class="fas fa-sitemap"></i> Производственные структуры</h2>
      
      <div class="form-group">
        <label for="structureName">Название структуры</label>
        <input type="text" id="structureName" class="form-control" placeholder="Введите название структуры" />
      </div>
      
      <div class="form-group">
        <label for="structureDescription">Описание</label>
        <textarea id="structureDescription" class="form-control" placeholder="Опишите структуру производства"></textarea>
      </div>
      
      <h4>Элементы структуры:</h4>
      <div class="structure-editor" id="structureEditor">
        <div class="structure-node">
          <div class="structure-node-header">
            <span>Участок 1</span>
            <i class="fas fa-times delete-node"></i>
          </div>
          <div class="form-group">
            <input type="text" class="form-control node-name" placeholder="Название участка" value="Фрезерный участок" />
          </div>
          <div class="form-group">
            <input type="text" class="form-control node-capabilities" placeholder="Возможности" value="Фрезеровка, сверление" />
          </div>
        </div>
      </div>
      
      <button class="add-node-btn" id="addNodeBtn">
        <i class="fas fa-plus"></i> Добавить участок
      </button>
      
      <div class="btn-group" style="margin-top: 20px;">
        <button class="btn" id="saveStructureBtn">
          <i class="fas fa-save"></i> Сохранить структуру
        </button>
        <button class="btn btn-outline" id="loadStructureBtn">
          <i class="fas fa-folder-open"></i> Загрузить структуру
        </button>
      </div>
    </div>



        <!-- Генерация заказов через ИИ -->
        <div class="ai-assistant planner-view">
          <h3><i class="fas fa-robot"></i> AI-ассистент для создания заказов</h3>
          <p>Опишите производственный заказ:</p>
          <textarea id="aiOrderInput" placeholder="Пример: Нужно изготовить 100 деталей корпуса. Фрезеровка займет 2 дня на фрезерном участке, затем сверление 1 день. После этого сборка 3 дня."></textarea>
          
          <div class="form-group">
            <label for="structureSelect">Производственная структура</label>
            <select id="structureSelect" class="form-control"></select>
          </div>
          
          <button class="btn btn-success" id="aiGenerateOrderBtn">
            <i class="fas fa-magic"></i> Создать заказ
          </button>
          <div class="ai-response" id="aiOrderResponse">
            Результат генерации заказа появится здесь...
          </div>
        </div>
        
        <!-- Редактор заказов -->
        <div class="flex-row">
          <div class="col-2">
            <div class="card planner-view">
              <h2 class="card-title"><i class="fas fa-edit"></i> Редактор заказов</h2>
              <form id="orderForm">
                <input type="hidden" id="orderId" />
                <div class="form-group">
                  <label for="orderName">Название заказа</label>
                  <input type="text" id="orderName" class="form-control" placeholder="Введите название заказа" required />
                </div>
                
                <div class="flex-row">
                  <div class="col">
                    <div class="form-group">
                      <label for="workCenterSelect">Рабочий центр</label>
                      <select id="workCenterSelect" class="form-control" required></select>
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <label for="orderPriority">Приоритет</label>
                      <select id="orderPriority" class="form-control">
                        <option value="high">Высокий</option>
                        <option value="medium" selected>Средний</option>
                        <option value="low">Низкий</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div class="flex-row">
                  <div class="col">
                    <div class="form-group">
                      <label for="startDate">Дата начала</label>
                      <input type="date" id="startDate" class="form-control" required />
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <label for="endDate">Дата окончания</label>
                      <input type="date" id="endDate" class="form-control" required />
                    </div>
                  </div>
                </div>
                
                <div class="flex-row">
                  <div class="col">
                    <div class="form-group">
                      <label for="materialCost">Стоимость материалов ($)</label>
                      <input type="number" id="materialCost" class="form-control" min="0" step="0.01" value="0" />
                    </div>
                  </div>
                  <div class="col">
                    <div class="form-group">
                      <label for="laborCost">Трудозатраты (ч)</label>
                      <input type="number" id="laborCost" class="form-control" min="0" step="0.5" value="0" />
                    </div>
                  </div>
                </div>
                
                <div class="form-group">
                  <label for="dependencySelect">Зависимость</label>
                  <select id="dependencySelect" class="form-control">
                    <option value="">Нет зависимости</option>
                  </select>
                  <span class="dependency-indicator">Выберите заказ, который должен завершиться до начала этого</span>
                </div>
                
                <div class="checkbox-group">
                  <input type="checkbox" id="autoAssign" />
                  <label for="autoAssign">Авто-распределение по участку с минимальной загрузкой</label>
                </div>
                
                <div class="btn-group">
                  <button type="submit" id="saveOrderBtn" class="btn"><i class="fas fa-save"></i> Добавить заказ</button>
                  <button type="button" id="cancelEditBtn" class="btn btn-outline" style="display:none;"><i class="fas fa-times"></i> Отмена</button>
                  <button type="button" id="calculateCostBtn" class="btn btn-info"><i class="fas fa-calculator"></i> Рассчитать стоимость</button>
                </div>
              </form>
            </div>
          </div>
          
          <div class="col">
            <div class="card">
              <h2 class="card-title"><i class="fas fa-file-export"></i> Экспорт / Импорт</h2>
              <div class="btn-group">
                <button id="exportBtn" class="btn btn-success"><i class="fas fa-download"></i> Экспортировать данные</button>
                <button id="importBtn" class="btn"><i class="fas fa-upload"></i> Импортировать данные</button>
                <button id="copyBtn" class="btn btn-outline"><i class="fas fa-copy"></i> Копировать</button>
              </div>
              <textarea id="importExportArea" class="import-export-area" placeholder="Вставьте сюда JSON для импорта или получите экспортированные данные"></textarea>
            </div>
            
            <div class="api-section">
              <h3><i class="fas fa-code"></i> API интеграция</h3>
              <div class="form-group">
                <label for="apiEndpoint">API Endpoint</label>
                <input type="text" id="apiEndpoint" class="form-control" value="/api" readonly>
              </div>
              <div class="form-group">
                <label for="apiKey">API Key</label>
                <input type="text" id="apiKey" class="form-control" value="Ваш API ключ" readonly>
              </div>
              <button class="btn" id="syncApiBtn">
                <i class="fas fa-sync-alt"></i> Синхронизировать
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Отчеты -->
    <div class="analytics-section director-view">
      <div class="analytics-header">
        <h3><i class="fas fa-chart-pie"></i> Аналитика производства</h3>
        <select id="analyticsPeriod" class="priority-select">
          <option value="week">Неделя</option>
          <option value="month" selected>Месяц</option>
          <option value="quarter">Квартал</option>
          <option value="year">Год</option>
        </select>
      </div>
      
      <div class="dashboard-stats" id="analyticsStats">
        <!-- Статистика будет загружена динамически -->
      </div>
      
      <div class="chart-container">
        <div class="chart-placeholder">
          <i class="fas fa-chart-bar"></i>
          <h4>Графики загрузки и эффективности</h4>
          <p>Данные будут отображены после начала работы</p>
        </div>
      </div>
    </div>
  </div>
  
  <div class="notification" id="notification">
    <i class="fas fa-check-circle"></i>
    <div class="notification-content"></div>
  </div>

  <script>
    // Конфигурация API
    const API_BASE_URL = 'http://localhost:3000/api';
    let authToken = null;
    let currentUser = null;

    // Конфигурация ролей
    const ROLES = {
      ADMIN: 'admin',
      PLANNER: 'planner',
      DIRECTOR: 'director',
      CLIENT: 'client',
      DIRECTOR_PLANNER: 'director-planner'
    };
    
    // Права доступа
    const PERMISSIONS = {
      [ROLES.ADMIN]: ['manage_work_centers', 'manage_users', 'view_all', 'edit_all', 'ai_structure', 'ai_orders'],
      [ROLES.PLANNER]: ['create_orders', 'edit_orders', 'view_orders', 'view_gantt', 'ai_orders'],
      [ROLES.DIRECTOR]: ['view_reports', 'view_analytics'],
      [ROLES.CLIENT]: ['create_orders', 'view_own_orders'],
      [ROLES.DIRECTOR_PLANNER]: ['create_orders', 'edit_orders', 'view_orders', 'view_gantt', 'view_reports', 'ai_orders']
    };

    // API клиент
    const apiClient = {
      // Вызов API с авторизацией
      async call(endpoint, method = 'GET', body = null) {
        const headers = {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        };

        const config = {
          method,
          headers
        };

        if (body) {
          config.body = JSON.stringify(body);
        }

        const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Ошибка сервера');
        }

        return data;
      },

      // Аутентификация
      async login(username, password) {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ username, password })
        });

        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.error || 'Ошибка аутентификации');
        }

        authToken = data.token;
        return this.getCurrentUser();
      },

      // Получение текущего пользователя
      async getCurrentUser() {
        if (!authToken) return null;
        
        // Декодируем токен для получения информации о пользователе
        const payload = JSON.parse(atob(authToken.split('.')[1]));
        currentUser = {
          id: payload.userId,
          username: payload.username,
          role: payload.role,
          tenantId: payload.tenantId
        };
        
        return currentUser;
      },

      // Рабочие центры
      async getWorkCenters() {
        return this.call('/work-centers');
      },

      async createWorkCenter(workCenter) {
        return this.call('/work-centers', 'POST', workCenter);
      },

      async updateWorkCenter(id, workCenter) {
        return this.call(`/work-centers/${id}`, 'PUT', workCenter);
      },

      async deleteWorkCenter(id) {
        return this.call(`/work-centers/${id}`, 'DELETE');
      },

      // Пользователи (для администраторов)
      async getUsers() {
        return this.call('/admin/users');
      },

      async createUser(user) {
        return this.call('/admin/users', 'POST', user);
      },

      async updateUserRole(userId, newRole) {
        return this.call(`/admin/users/${userId}/role`, 'PUT', { newRole });
      },

      // Заказы
      async getOrders() {
        return this.call('/orders');
      },

      async createOrder(order) {
        return this.call('/orders', 'POST', order);
      },

      async updateOrder(id, order) {
        return this.call(`/orders/${id}`, 'PUT', order);
      },

      async deleteOrder(id) {
        return this.call(`/orders/${id}`, 'DELETE');
      },

      // Структуры производства
      async getProductionStructures() {
        return this.call('/production-structures');
      },

      async createProductionStructure(structure) {
        return this.call('/production-structures', 'POST', structure);
      },

      async deleteProductionStructure(id) {
        return this.call(`/production-structures/${id}`, 'DELETE');
      },

      // Отчеты
      async getProductionReport(period = 'month') {
        return this.call(`/reports/production?period=${period}`);
      },

      // AI интеграция
      async generateStructureFromAI(description) {
        return this.call('/ai/generate-structure', 'POST', { description });
      },

      async generateOrderFromAI(description, structureId) {
        return this.call('/ai/generate-order', 'POST', { description, structureId });
      }
    };

    // Инициализация приложения
    document.addEventListener('DOMContentLoaded', async () => {

      // Добавляем инициализацию библиотеки Ганта
      if (typeof Gantt !== 'undefined') {
        console.log('Gantt library loaded');
      } else {
        console.error('Gantt library not loaded');
      }
      // DOM элементы
      const elements = {
        // Аутентификация
        userName: document.getElementById('userName'),
        userRole: document.getElementById('userRole'),
        userAvatar: document.getElementById('userAvatar'),
        
        // Рабочие центры
        addWorkCenterForm: document.getElementById('addWorkCenterForm'),
        workCentersList: document.getElementById('workCentersList'),
        workCenterSelect: document.getElementById('workCenterSelect'),
        
        // Пользователи
        addUserBtn: document.getElementById('addUserBtn'),
        usersList: document.getElementById('usersList'),
        
        // Заказы
        ordersList: document.getElementById('ordersList'),
        orderForm: document.getElementById('orderForm'),
        saveOrderBtn: document.getElementById('saveOrderBtn'),
        dependencySelect: document.getElementById('dependencySelect'),
        
        // AI
        aiGenerateStructureBtn: document.getElementById('aiGenerateStructureBtn'),
        aiStructureInput: document.getElementById('aiStructureInput'),
        aiStructureResponse: document.getElementById('aiStructureResponse'),
        aiGenerateOrderBtn: document.getElementById('aiGenerateOrderBtn'),
        aiOrderInput: document.getElementById('aiOrderInput'),
        aiOrderResponse: document.getElementById('aiOrderResponse'),
        structureSelect: document.getElementById('structureSelect'),
        
        // Отчеты
        analyticsStats: document.getElementById('analyticsStats'),
        
        // Роли
        roleButtons: document.querySelectorAll('.role-btn'),
        
        // Уведомления
        notification: document.getElementById('notification')
      };

      // Инициализация данных
      async function init() {
        // Проверяем, есть ли сохраненный токен
        const savedToken = localStorage.getItem('mesAuthToken');
        if (savedToken) {
          authToken = savedToken;
          currentUser = await apiClient.getCurrentUser();
          if (currentUser) {
            updateUserInfo();
            loadInitialData();
            return;
          }
        }
        
        // Демо-вход (в реальном приложении будет форма входа)
        try {
          await apiClient.login('admin', 'admin123');
          localStorage.setItem('mesAuthToken', authToken);
          updateUserInfo();
          loadInitialData();
          // Инициализация редактора структур
          initStructureEditor();
        } catch (error) {
          showNotification(`Ошибка входа: ${error.message}`, 'error');
        }
      }

      // Обновление информации о пользователе
      function updateUserInfo() {
        if (!currentUser) return;
        
        elements.userName.textContent = currentUser.username;
        elements.userRole.textContent = `Роль: ${getRoleName(currentUser.role)}`;
        elements.userAvatar.textContent = currentUser.username.charAt(0).toUpperCase();
      }

      // Загрузка начальных данных
      async function loadInitialData() {
        try {
          // Загрузка рабочих центров
          const workCenters = await apiClient.getWorkCenters();
          renderWorkCenters(workCenters);
          populateWorkCenterSelect(workCenters);
          
          // Загрузка пользователей (для администратора)
          if (currentUser.role === ROLES.ADMIN) {
            const users = await apiClient.getUsers();
            renderUsers(users);
          }
          
          // Загрузка заказов
          const orders = await apiClient.getOrders();
          renderOrders(orders);
          initGantt(orders);
          
          // Загрузка структур производства
          const structures = await apiClient.getProductionStructures();
          populateStructureSelect(structures);
          renderStructures(structures);
          
          // Загрузка отчетов (для директора)
          if ([ROLES.DIRECTOR, ROLES.DIRECTOR_PLANNER, ROLES.ADMIN].includes(currentUser.role)) {
            const report = await apiClient.getProductionReport();
            renderAnalytics(report);
          }
          
          // Обновление статистики
          updateStats(orders.length, workCenters.length);
          
        } catch (error) {
          showNotification(`Ошибка загрузки данных: ${error.message}`, 'error');
        }
      }

      // Рендер рабочих центров
      function renderWorkCenters(workCenters) {
        elements.workCentersList.innerHTML = '';
        
        if (workCenters.length === 0) {
          elements.workCentersList.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-cogs"></i>
              <h3>Нет рабочих центров</h3>
              <p>Добавьте рабочие центры для начала работы</p>
            </div>
          `;
          return;
        }
        
        let html = '<h3>Список рабочих центров</h3><div class="equipment-tabs">';
        
        workCenters.forEach(wc => {
          html += `
            <div class="tab-btn" data-id="${wc.id}">
              <i class="fas fa-cog"></i> ${wc.name}
              <span class="badge">${wc.hourly_rate}$/час</span>
              <span class="del-eq" data-id="${wc.id}"><i class="fas fa-times"></i></span>
            </div>
          `;
        });
        
        html += '</div>';
        elements.workCentersList.innerHTML = html;
        

        // Добавляем функцию для отображения списка структур
    function renderStructures(structures) {
      const structuresContainer = document.getElementById('structuresList');
      if (!structuresContainer) return;
      
      structuresContainer.innerHTML = '';
      
      if (structures.length === 0) {
        structuresContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-sitemap"></i>
            <h3>Нет производственных структур</h3>
            <p>Создайте структуры для вашего производства</p>
          </div>
        `;
        return;
      }
      
      let html = '<h3>Сохраненные структуры</h3><div class="structures-container">';
      
      structures.forEach(structure => {
        html += `
          <div class="structure-item">
            <div class="structure-info">
              <h4>${structure.name}</h4>
              <p>${structure.description || 'Без описания'}</p>
              <div class="structure-preview">
                ${structure.structure.nodes.map(node => `
                  <div class="node-preview">
                    <i class="fas fa-cog"></i> ${node.name}
                  </div>
                `).join('')}
              </div>
            </div>
            <div class="structure-actions">
              <button class="btn btn-sm btn-outline load-structure" data-id="${structure.id}">
                <i class="fas fa-edit"></i> Редактировать
              </button>
              <button class="btn btn-sm btn-danger delete-structure" data-id="${structure.id}">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      structuresContainer.innerHTML = html;
      
      // Обработчики для кнопок
      document.querySelectorAll('.load-structure').forEach(btn => {
        btn.addEventListener('click', async () => {
          const structureId = btn.dataset.id;
          try {
            const structure = structures.find(s => s.id === structureId);
            if (!structure) return;
            
            document.getElementById('structureName').value = structure.name;
            document.getElementById('structureDescription').value = structure.description || '';
            
            // Очищаем текущие узлы
            const structureEditor = document.getElementById('structureEditor');
            structureEditor.innerHTML = '';
            
            // Добавляем узлы из структуры
            structure.structure.nodes.forEach(node => {
              const newNode = document.createElement('div');
              newNode.className = 'structure-node';
              newNode.innerHTML = `
                <div class="structure-node-header">
                  <span>Участок</span>
                  <i class="fas fa-times delete-node"></i>
                </div>
                <div class="form-group">
                  <input type="text" class="form-control node-name" placeholder="Название участка" value="${node.name}" />
                </div>
                <div class="form-group">
                  <input type="text" class="form-control node-capabilities" placeholder="Возможности" value="${node.capabilities}" />
                </div>
              `;
              structureEditor.appendChild(newNode);
              
              // Обработчик удаления узла
              newNode.querySelector('.delete-node').addEventListener('click', () => {
                newNode.remove();
              });
            });
            
            showNotification('Структура загружена в редактор', 'success');
          } catch (error) {
            showNotification(`Ошибка загрузки структуры: ${error.message}`, 'error');
          }
        });
      });
      
      document.querySelectorAll('.delete-structure').forEach(btn => {
        btn.addEventListener('click', async () => {
          const structureId = btn.dataset.id;
          if (confirm('Вы уверены, что хотите удалить эту производственную структуру?')) {
            try {
              await apiClient.deleteProductionStructure(structureId);
              showNotification('Структура удалена', 'success');
              loadInitialData();
            } catch (error) {
              showNotification(`Ошибка удаления: ${error.message}`, 'error');
            }
          }
        });
      });
    }


        // Обработчики удаления
        document.querySelectorAll('.del-eq').forEach(btn => {
          btn.addEventListener('click', async (e) => {
            e.stopPropagation();
            const workCenterId = btn.dataset.id;
            if (confirm('Вы уверены, что хотите удалить этот рабочий центр?')) {
              try {
                await apiClient.deleteWorkCenter(workCenterId);
                showNotification('Рабочий центр удален', 'success');
                loadInitialData();
              } catch (error) {
                showNotification(`Ошибка удаления: ${error.message}`, 'error');
              }
            }
          });
        });
      }

      // Рендер пользователей
      function renderUsers(users) {
        elements.usersList.innerHTML = '';
        
        if (users.length === 0) {
          elements.usersList.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users"></i>
              <h3>Нет пользователей</h3>
              <p>Добавьте пользователей для доступа к системе</p>
            </div>
          `;
          return;
        }
        
        let html = '<h3>Список пользователей</h3><div class="users-container">';
        
        users.forEach(user => {
          html += `
            <div class="user-item">
              <div class="user-info">
                <span class="user-avatar">${user.username.charAt(0)}</span>
                <div>
                  <strong>${user.username}</strong>
                  <div>Роль: ${getRoleName(user.role)}</div>
                </div>
              </div>
              <select class="user-role-select" data-id="${user.id}">
                <option value="admin" ${user.role === 'admin' ? 'selected' : ''}>Администратор</option>
                <option value="planner" ${user.role === 'planner' ? 'selected' : ''}>Планировщик</option>
                <option value="director" ${user.role === 'director' ? 'selected' : ''}>Директор</option>
                <option value="client" ${user.role === 'client' ? 'selected' : ''}>Клиент</option>
                <option value="director-planner" ${user.role === 'director-planner' ? 'selected' : ''}>Директор+Планировщик</option>
              </select>
            </div>
          `;
        });
        
        html += '</div>';
        elements.usersList.innerHTML = html;
        
        // Обработчики изменения ролей
        document.querySelectorAll('.user-role-select').forEach(select => {
          select.addEventListener('change', async () => {
            const userId = select.dataset.id;
            const newRole = select.value;
            
            try {
              await apiClient.updateUserRole(userId, newRole);
              showNotification('Роль пользователя обновлена', 'success');
            } catch (error) {
              showNotification(`Ошибка обновления роли: ${error.message}`, 'error');
            }
          });
        });
      }

      // Рендер заказов
      function renderOrders(orders) {
        const ordersContainer = elements.ordersList;
        ordersContainer.innerHTML = '';
        
        if (orders.length === 0) {
          ordersContainer.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-inbox"></i>
              <h3>Нет заказов</h3>
              <p>Добавьте заказы для отображения в списке</p>
            </div>
          `;
          return;
        }
        
        orders.forEach(order => {
          const orderEl = document.createElement('div');
          orderEl.className = 'order-item';
          orderEl.dataset.id = order.id;
          
          orderEl.innerHTML = `
            <div class="order-info">
              <div class="order-name">${order.name}</div>
              <div class="order-dates">
                <span>Начало: ${new Date(order.start_date).toLocaleDateString()}</span>
                <span>Окончание: ${new Date(order.end_date).toLocaleDateString()}</span>
              </div>
              <div class="order-cost">Стоимость: ${order.material_cost + order.labor_cost}$</div>
            </div>
            <div class="order-progress ${order.priority}">${getPriorityName(order.priority)}</div>
            <div class="order-actions">
              <button class="action-btn edit-order" data-id="${order.id}"><i class="fas fa-edit"></i></button>
              <button class="action-btn delete-order" data-id="${order.id}"><i class="fas fa-trash"></i></button>
            </div>
          `;
          
          ordersContainer.appendChild(orderEl);
        });
        
        // Обработчики действий
        document.querySelectorAll('.edit-order').forEach(btn => {
          btn.addEventListener('click', async () => {
            const orderId = btn.dataset.id;
            try {
              const order = orders.find(o => o.id === orderId);
              if (order) {
                fillOrderForm(order);
              }
            } catch (error) {
              showNotification(`Ошибка загрузки заказа: ${error.message}`, 'error');
            }
          });
        });
        
        document.querySelectorAll('.delete-order').forEach(btn => {
          btn.addEventListener('click', async () => {
            const orderId = btn.dataset.id;
            if (confirm('Вы уверены, что хотите удалить этот заказ?')) {
              try {
                await apiClient.deleteOrder(orderId);
                showNotification('Заказ удален', 'success');
                loadInitialData();
              } catch (error) {
                showNotification(`Ошибка удаления: ${error.message}`, 'error');
              }
            }
          });
        });
      }

      // Рендер аналитики
      function renderAnalytics(report) {
        elements.analyticsStats.innerHTML = `
          <div class="stat-card">
            <i class="fas fa-money-bill-wave"></i>
            <div class="stat-value">${report.completion_rate}%</div>
            <div class="stat-label">Выполнение плана</div>
            <div class="kpi-indicator">
              <div class="kpi-progress ${report.completion_rate > 90 ? 'kpi-good' : report.completion_rate > 75 ? 'kpi-medium' : 'kpi-bad'}" 
                   style="width: ${report.completion_rate}%"></div>
            </div>
          </div>
          
          <div class="stat-card">
            <i class="fas fa-clock"></i>
            <div class="stat-value">${report.equipment_utilization}%</div>
            <div class="stat-label">Использование оборудования</div>
            <div class="kpi-indicator">
              <div class="kpi-progress ${report.equipment_utilization > 85 ? 'kpi-good' : report.equipment_utilization > 70 ? 'kpi-medium' : 'kpi-bad'}" 
                   style="width: ${report.equipment_utilization}%"></div>
            </div>
          </div>
          
          <div class="stat-card">
            <i class="fas fa-truck-loading"></i>
            <div class="stat-value">${report.avg_completion_time}</div>
            <div class="stat-label">Среднее время выполнения</div>
          </div>
          
          <div class="stat-card">
            <i class="fas fa-user-clock"></i>
            <div class="stat-value">${report.labor_efficiency}%</div>
            <div class="stat-label">Эффективность труда</div>
            <div class="kpi-indicator">
              <div class="kpi-progress ${report.labor_efficiency > 85 ? 'kpi-good' : report.labor_efficiency > 70 ? 'kpi-medium' : 'kpi-bad'}" 
                   style="width: ${report.labor_efficiency}%"></div>
            </div>
          </div>
        `;
      }

      // Обновление статистики
      function updateStats(ordersCount, workCentersCount) {
        document.getElementById('totalOrders').textContent = ordersCount;
        document.getElementById('totalWorkCenters').textContent = workCentersCount;
        document.getElementById('avgLoad').textContent = '78%'; // Заглушка
        document.getElementById('efficiency').textContent = '85%'; // Заглушка
      }

      // Показ уведомлений
      function showNotification(message, type = 'success') {
        const notification = elements.notification;
        const content = notification.querySelector('.notification-content');
        content.textContent = message;
        
        notification.className = 'notification';
        notification.classList.add(type, 'show');
        
        notification.querySelector('i').className = 
          type === 'success' ? 'fas fa-check-circle' :
          type === 'error' ? 'fas fa-exclamation-circle' : 'fas fa-info-circle';
        
        setTimeout(() => {
          notification.classList.remove('show');
        }, 3000);
      }

      // Вспомогательные функции
      function getRoleName(role) {
        const names = {
          [ROLES.ADMIN]: 'Администратор',
          [ROLES.PLANNER]: 'Планировщик',
          [ROLES.DIRECTOR]: 'Директор',
          [ROLES.CLIENT]: 'Клиент',
          [ROLES.DIRECTOR_PLANNER]: 'Директор+Планировщик'
        };
        return names[role] || role;
      }

      function getPriorityName(priority) {
        const names = {
          'high': 'Высокий',
          'medium': 'Средний',
          'low': 'Низкий'
        };
        return names[priority] || priority;
      }

      // Заполнение выпадающих списков
      function populateWorkCenterSelect(workCenters) {
        const select = elements.workCenterSelect;
        select.innerHTML = '';
        
        workCenters.forEach(wc => {
          const option = document.createElement('option');
          option.value = wc.id;
          option.textContent = wc.name;
          select.appendChild(option);
        });
      }

      function populateStructureSelect(structures) {
        const select = elements.structureSelect;
        select.innerHTML = '<option value="">Выберите структуру</option>';
        
        structures.forEach(structure => {
          const option = document.createElement('option');
          option.value = structure.id;
          option.textContent = structure.name;
          select.appendChild(option);
        });
      }


      // Инициализация библиотеки для диаграммы Ганта
    function initGantt(orders) {
      const ganttContainer = document.getElementById('gantt');
      ganttContainer.innerHTML = '';
      
      if (orders.length === 0) {
        ganttContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-chart-line"></i>
            <h3>Нет данных для отображения</h3>
            <p>Добавьте участки и заказы для построения диаграммы</p>
          </div>
        `;
        return;
      }
      // Проверяем, что библиотека загружена
      if (typeof Gantt === 'undefined') {
        console.error('Gantt library is not available');
        ganttContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Ошибка загрузки библиотеки</h3>
            <p>Не удалось загрузить библиотеку диаграмм Ганта</p>
          </div>
        `;
        return;
      }
      // Создаем контейнер для диаграммы
      const ganttElement = document.createElement('div');
      ganttElement.className = 'gantt-container';
      ganttContainer.appendChild(ganttElement);
      
      // Подготовка данных для Ганта
      const tasks = orders.map(order => {
        // Рассчитываем процент выполнения
        const now = new Date();
        const start = new Date(order.start_date);
        const end = new Date(order.end_date);
        const total = end - start;
        const progress = total > 0 ? Math.min(100, Math.max(0, Math.round(((now - start) / total) * 100))) : 0;
        
        return {
          id: order.id,
          name: order.name,
          start: order.start_date,
          end: order.end_date,
          progress: progress,
          dependencies: order.dependencies ? order.dependencies.join(',') : '',
          work_center: order.work_center_name
        };
      });
      
      // Создаем диаграмму Ганта
      const gantt = new Gantt(ganttElement, tasks, {
        header_height: 50,
        column_width: 30,
        step: 24,
        view_modes: ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month'],
        bar_height: 20,
        bar_corner_radius: 3,
        arrow_curve: 5,
        padding: 18,
        view_mode: 'Week',
        date_format: 'YYYY-MM-DD',
        custom_popup_html: function(task) {
          return `
            <div class="gantt-popup">
              <h5>${task.name}</h5>
              <p>Участок: ${task.work_center || 'Не назначен'}</p>
              <p>Начало: ${formatDate(task.start)}</p>
              <p>Окончание: ${formatDate(task.end)}</p>
              <p>Прогресс: ${task.progress}%</p>
            </div>
          `;
        }
      });
    }

    // Форматирование даты для Ганта
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU');
    }

    // Функция для работы с производственными структурами
    function initStructureEditor() {
      const structureEditor = document.getElementById('structureEditor');
      const addNodeBtn = document.getElementById('addNodeBtn');
      const saveStructureBtn = document.getElementById('saveStructureBtn');
      const loadStructureBtn = document.getElementById('loadStructureBtn');
      
      // Добавление нового узла структуры
      addNodeBtn.addEventListener('click', () => {
        const newNode = document.createElement('div');
        newNode.className = 'structure-node';
        newNode.innerHTML = `
          <div class="structure-node-header">
            <span>Новый участок</span>
            <i class="fas fa-times delete-node"></i>
          </div>
          <div class="form-group">
            <input type="text" class="form-control node-name" placeholder="Название участка" />
          </div>
          <div class="form-group">
            <input type="text" class="form-control node-capabilities" placeholder="Возможности" />
          </div>
        `;
        structureEditor.appendChild(newNode);
        
        // Обработчик удаления узла
        newNode.querySelector('.delete-node').addEventListener('click', () => {
          newNode.remove();
        });
      });
      
      // Обработчики для существующих кнопок удаления
      document.querySelectorAll('.delete-node').forEach(btn => {
        btn.addEventListener('click', function() {
          this.closest('.structure-node').remove();
        });
      });
      
      // Сохранение структуры
      saveStructureBtn.addEventListener('click', async () => {
        const structureName = document.getElementById('structureName').value;
        const structureDescription = document.getElementById('structureDescription').value;
        
        if (!structureName) {
          showNotification('Введите название структуры', 'error');
          return;
        }
        
        const nodes = Array.from(document.querySelectorAll('.structure-node')).map(node => {
          return {
            name: node.querySelector('.node-name').value,
            capabilities: node.querySelector('.node-capabilities').value
          };
        });
        
        if (nodes.length === 0) {
          showNotification('Добавьте хотя бы один участок', 'error');
          return;
        }
        
        try {
          const structure = {
            name: structureName,
            description: structureDescription,
            structure: {
              nodes: nodes
            }
          };
          
          const result = await apiClient.createProductionStructure(structure);
          showNotification('Структура сохранена успешно', 'success');
          loadInitialData();
        } catch (error) {
          showNotification(`Ошибка сохранения: ${error.message}`, 'error');
        }
      });
      
      // Загрузка структуры
      loadStructureBtn.addEventListener('click', async () => {
        try {
          const structures = await apiClient.getProductionStructures();
          if (structures.length === 0) {
            showNotification('Нет сохраненных структур', 'info');
            return;
          }
          
          // Простой выбор первой структуры (в реальном приложении сделали бы выбор)
          const structure = structures[0];
          
          document.getElementById('structureName').value = structure.name;
          document.getElementById('structureDescription').value = structure.description || '';
          
          // Очищаем текущие узлы
          structureEditor.innerHTML = '';
          
          // Добавляем узлы из структуры
          structure.structure.nodes.forEach(node => {
            const newNode = document.createElement('div');
            newNode.className = 'structure-node';
            newNode.innerHTML = `
              <div class="structure-node-header">
                <span>Участок</span>
                <i class="fas fa-times delete-node"></i>
              </div>
              <div class="form-group">
                <input type="text" class="form-control node-name" placeholder="Название участка" value="${node.name}" />
              </div>
              <div class="form-group">
                <input type="text" class="form-control node-capabilities" placeholder="Возможности" value="${node.capabilities}" />
              </div>
            `;
            structureEditor.appendChild(newNode);
            
            // Обработчик удаления узла
            newNode.querySelector('.delete-node').addEventListener('click', () => {
              newNode.remove();
            });
          });
          
          showNotification('Структура загружена', 'success');
        } catch (error) {
          showNotification(`Ошибка загрузки: ${error.message}`, 'error');
        }
      });
    }

    // В функции loadInitialData добавляем вызов для инициализации Ганта:
    async function loadInitialData() {
      try {
        // ... (существующий код) ...
        
        // Загрузка заказов
        const orders = await apiClient.getOrders();
        renderOrders(orders);
        initGantt(orders); // Инициализируем диаграмму Ганта
        
        // ... (остальной код) ...
      } catch (error) {
        showNotification(`Ошибка загрузки данных: ${error.message}`, 'error');
      }
    }


      // Обработчики событий
      elements.addWorkCenterForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const workCenter = {
          name: document.getElementById('newWorkCenterName').value,
          description: document.getElementById('workCenterDescription').value,
          hourly_rate: parseFloat(document.getElementById('hourlyRate').value),
          setup_time: parseInt(document.getElementById('setupTime').value),
          tenant_id: currentUser.tenantId
        };
        
        try {
          await apiClient.createWorkCenter(workCenter);
          showNotification('Рабочий центр добавлен', 'success');
          loadInitialData();
          elements.addWorkCenterForm.reset();
        } catch (error) {
          showNotification(`Ошибка создания: ${error.message}`, 'error');
        }
      });

      elements.addUserBtn.addEventListener('click', async () => {
        const username = document.getElementById('userNameInput').value;
        const password = document.getElementById('userPassword').value;
        const role = document.getElementById('userRoleSelect').value;
        
        if (!username || !password || !role) {
          showNotification('Заполните все поля', 'error');
          return;
        }
        
        try {
          await apiClient.createUser({ username, password, role });
          showNotification('Пользователь добавлен', 'success');
          loadInitialData();
        } catch (error) {
          showNotification(`Ошибка создания: ${error.message}`, 'error');
        }
      });

      elements.orderForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const order = {
          name: document.getElementById('orderName').value,
          work_center_id: document.getElementById('workCenterSelect').value,
          start_date: document.getElementById('startDate').value,
          end_date: document.getElementById('endDate').value,
          priority: document.getElementById('orderPriority').value,
          material_cost: parseFloat(document.getElementById('materialCost').value) || 0,
          labor_cost: parseFloat(document.getElementById('laborCost').value) || 0,
          tenant_id: currentUser.tenantId,
          created_by: currentUser.id
        };
        
        try {
          if (document.getElementById('orderId').value) {
            // Редактирование
            await apiClient.updateOrder(document.getElementById('orderId').value, order);
            showNotification('Заказ обновлен', 'success');
          } else {
            // Создание
            await apiClient.createOrder(order);
            showNotification('Заказ создан', 'success');
          }
          loadInitialData();
          elements.orderForm.reset();
        } catch (error) {
          showNotification(`Ошибка сохранения: ${error.message}`, 'error');
        }
      });

      elements.aiGenerateStructureBtn.addEventListener('click', async () => {
        const description = elements.aiStructureInput.value.trim();
        if (!description) {
          showNotification('Введите описание структуры', 'error');
          return;
        }
        
        elements.aiStructureResponse.textContent = 'Генерация структуры...';
        
        try {
          const result = await apiClient.generateStructureFromAI(description);
          elements.aiStructureResponse.textContent = result.message;
          showNotification('Структура создана', 'success');
          loadInitialData();
        } catch (error) {
          elements.aiStructureResponse.textContent = `Ошибка: ${error.message}`;
          showNotification('Ошибка генерации', 'error');
        }
      });

      elements.aiGenerateOrderBtn.addEventListener('click', async () => {
        const description = elements.aiOrderInput.value.trim();
        const structureId = elements.structureSelect.value;
        
        if (!description) {
          showNotification('Введите описание заказа', 'error');
          return;
        }
        
        if (!structureId) {
          showNotification('Выберите производственную структуру', 'error');
          return;
        }
        
        elements.aiOrderResponse.textContent = 'Генерация заказа...';
        
        try {
          const result = await apiClient.generateOrderFromAI(description, structureId);
          elements.aiOrderResponse.textContent = result.message;
          showNotification('Заказ создан', 'success');
          loadInitialData();
        } catch (error) {
          elements.aiOrderResponse.textContent = `Ошибка: ${error.message}`;
          showNotification('Ошибка генерации', 'error');
        }
      });

      // Обработчики переключения ролей
      elements.roleButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          elements.roleButtons.forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          currentUser.role = btn.dataset.role;
          updateUserInfo();
          loadInitialData();
        });
      });

      // Запуск приложения
      init();
    });
  </script>
</body>
</html>
